\import Data.List
\import Paths
\import Paths.Meta
\import lect03
\open Nat(+,*)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.

\func fileTestNormal : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\func M5Normal : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | :: a xs => pmap' (:: a) (++-assoc xs ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => helpFun (reverse ys)
  | :: a xs => trans'' (pmap' (\lam x => x ++ a :: nil) (reverse++ xs ys)) (++-assoc (reverse ys) (reverse xs) (a :: nil))
  \where {
    \func helpFun {A : \Type} (xs : List A) : xs = xs ++ nil \elim xs
      | nil => idp
      | :: a xs => pmap' (:: a) (helpFun xs)
  }

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | :: a xs => rewrite (reverse++ (reverse xs) (a :: nil)) (pmap' (\lam x => a :: x) (reverse-isInvolutive xs))

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n => rewriteI +-assoc (rewriteI +-assoc (pmap' (\lam x => x + k) (helpFun n m k)))
  \where {
    \func helpFun (n m k : Nat) : (m + k) * n + m = m * n + m + k * n =>
      rewrite +-assoc (rewrite (+-comm m (k * n)) (rewriteI +-assoc (pmap' (\lam x => x + m) (rdistr n m k))))
  }

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim n
  | 0 => rewrite helpFun0 (rewrite helpFun0 (rewrite helpFun0 idp))
  | suc n => rewrite (rdistr (m + k) n 1) (rewrite (rdistr m n 1) (rewrite (rdistr k n 1) (rewrite helpFun1 (rewrite helpFun1 (rewrite helpFun1 (rewriteI +-assoc (rewriteI +-assoc (pmap' (\lam x => x + k) (helpFun n m k)))))))))
  \where {
    \func helpFun0 (n : Nat) : 0 * n = 0 \elim n
      | 0 => idp
      | suc n => helpFun0 n
    \func helpFun1 (n : Nat) : 1 * n = n \elim n
      | 0 => idp
      | suc n => pmap'' suc (helpFun1 n)
    \func helpFun (n m k : Nat) : n * (m + k) + m = n * m + m + n * k =>
      rewrite +-assoc (rewrite (+-comm m (n * k)) (rewriteI +-assoc (pmap' (\lam x => x + m) (ldistr n m k))))
  }

-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  rewrite (pmap'' (f a) q) (pmap' (\lam f => f b') (pmap'' f p))

-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam x => x) p a -- rewrite p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap'' B p) b
