-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (x y z : Nat) : Nat => y

\func apply (f : Nat -> Nat) (x : Nat) : Nat => f x

\func compose (f : Nat -> Nat) (g : Nat -> Nat) (x : Nat) : Nat => f (g x)

\func flip (f : Nat -> Nat -> Nat) (x : Nat) (y : Nat) : Nat => f y x

\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infixl 6 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infixl 7 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (x y z : Bool) : Bool \elim x
  | true => y
  | false => z

\func ifTest1 : if true true false = true => idp
\func ifTest2 : if false true false = false => idp

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

\func orTest1 : true || false = true => idp
\func orTest2 : false || false = false => idp
\func orTest3 : false || true = true => idp

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y' => x * (x ^ y')

\func fac (x : Nat) : Nat
  | 0 => 1
  | suc x => suc x * fac x

\func facTest1 : fac 0 = 1 => idp
\func facTest2 : fac 3 = 6 => idp

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => aux x x y
  \where {
    \func aux (fuel x y : Nat) : Nat \elim fuel
      | 0 => 0
      | suc fuel => lect01.if (x < y) x (aux fuel (x - y) y)
  }

\func modTest1 : mod 5 3 = 2 => idp
\func modTest2 : mod 15 5 = 0 => idp

\func gcd (x y : Nat) => aux (x + y) x y
  \where {
    \func aux (fuel x y : Nat) : Nat \elim fuel, x, y
      | 0, _, _ => 0
      | _, 0, y' => y'
      | _, x', 0 => x'
      | suc fuel, x, y =>  lect01.if (x < y) (aux fuel (y - x) x) (aux fuel (x - y) y)
  }

\func gcdTest1 : gcd 5 3 = 1 => idp
\func gcdTest2 : gcd 15 5 = 5 => idp
\func gcdTest3 : gcd 15 0 = 15 => idp
\func gcdTest4 : gcd 18 24 = 6 => idp
