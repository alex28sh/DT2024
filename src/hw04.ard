\import Data.Bool
\import Data.List
\import Function.Meta
\import Paths
\import lect01 (*, +, id)
\import lect02 (T)
\import lect04

-- 1. Напишите функцию lookup, которая принимает List A и натуральное число и возвращает элемент по заданому индексу.
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке.
--    Поэтому эта функция должна дополнительно еще принимать доказательство того, что индекс находится в допустимых границах, в виде T (n < length xs).

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func lookup {A : \Type} (xs : List A) (n : Nat) (p : T (n < length xs)) : A \elim xs, n, p
  | :: x xs, 0, p => x
  | :: _ xs, suc n, p => lookup xs n p
  | nil, 0, ()

-- 2. Реализуйте аналоги функции replicate для vec и Vec (эта функция создает список заданной длины, состоящий из повторений данного элемента).

\func replicate {A : \Type} (n : Nat) (a : A) : vec A n \elim n
  | suc n => (a, replicate n a)
  | 0 => ()

\func replicate' {A : \Type} (n : Nat) (a : A) : Vec A n \elim n
  | suc n => cons a $ replicate' n a
  | 0 => Vec.nil

\func replTest : replicate 3 9 = (9, (9, (9, ()))) => idp
\func replTest1 : replicate 0 9 = () => idp
\func replTest' : replicate' 3 9 = Vec.cons 9 (Vec.cons 9 $ Vec.cons 9 Vec.nil) => idp
\func replTest1' : replicate' 0 9 = Vec.nil => idp

-- 3. Реализуйте аналоги функции map для vec и Vec.

\func map {n : Nat} {A B : \Type} (f : A -> B) (v : vec A n) : vec B n \elim n
  | 0 => ()
  | suc n => (f $ head n v, map f $ tail n v)


\func map' {n : Nat} {A B : \Type} (f : A -> B) (v : Vec A n) : Vec B n \elim n, v
  | 0, _ => Vec.nil
  | suc n, Vec.cons a v => cons (f a) $ map' f v

\func mapTest : map {3} (\lam x => suc x) (replicate 3 9 : vec Nat 3) = replicate 3 10 => idp
\func mapTest' : map' {3} (\lam x => suc x) (replicate' 3 9) = replicate' 3 10 => idp

-- 4. Реализуйте аналоги функции zipWith для vec и Vec.
--    Функция должна принимать вектора одинаковой длины.

\func zipWith {n : Nat} {A B C : \Type} (f : A -> B -> C) (v1 : vec A n) (v2 : vec B n) : vec C n \elim n
  | 0 => ()
  | suc n => ((f $ head n v1) $ head n v2, (zipWith f $ tail n v1) $ tail n v2)


\func zipWith' {n : Nat} {A B C : \Type} (f : A -> B -> C) (v1 : Vec A n) (v2 : Vec B n) : Vec C n \elim n, v1, v2
  | 0, _, _ => Vec.nil
  | suc n, Vec.cons a v1, Vec.cons b v2 => Vec.cons (f a b) $ zipWith' f v1 v2


\func zipWithTest : zipWith {3} (+) (replicate 3 9) (replicate 3 9) = replicate 3 18 => idp
\func zipWithTest' : zipWith' {3} (+) (replicate' 3 9) (replicate' 3 9) = replicate' 3 18 => idp

-- 5. Определите тип CTree A n полных бинарных деревьев высоты ровно n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => leafC
  | suc n => nodeC A (CTree A n) (CTree A n)

-- 6. Определите тип Tree A n бинарных деревьев высоты не больше n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data Tree (A : \Type) (n : Nat) \elim n
  | 0 => leafComp
  | suc n => {
    | leaf
    | node A (Tree A n) (Tree A n)
  }

-- определите функцию, возвращающую высоту дерева.

\func height {A : \Type} (n : Nat) (t : Tree A n) : Fin (suc n) \elim n, t
  | 0, leafComp => fzero
  | suc n', leaf => fzero
  | suc n', node a l r =>
    fsuc $ max' (height n' l) (height n' r)

\func max' {n : Nat} (a : Fin n) (b : Fin n) : Fin n \elim n, a, b
  | suc n, fzero, b => b
  | suc n, a, fzero => a
  | suc n, fsuc a, fsuc b => fsuc $ max' a b

\func heightTest : height {Nat} 0 leafComp = fzero => idp
\func heightTest1 : height {Nat} 1 leaf = fzero => idp
\func heightTest2 : height {Nat} 2 (node 1 leaf (node 2 leafComp leafComp)) = fsuc (fsuc fzero) => idp

-- 7. Функции Fin n -> A соответствуют спискам элементов A длины n.
--     Функция, преобразующая Vec A n в Fin n -> A, была реализована на лекции.
--     Реализуйте обратную функцию.

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n
  | 0 => Vec.nil
  | suc n => Vec.cons (f fzero) (coin $ \lam (x : Fin n) => f $ fsuc x)

-- example of usage
\func tFunc (x : Fin 3) : Nat \elim x
  | fzero => 0
  | fsuc fzero => 1
  | fsuc (fsuc fzero) => 2
  | fsuc (fsuc (fsuc ()))

\func coinTest : coin tFunc = Vec.cons 0 (Vec.cons 1 $ Vec.cons 2 Vec.nil) => idp

-- Optional task
-- 8. Определите тип матриц и ряд функций над ними.

\func Mat (A : \Type) (n m : Nat) : \Type => {?}

-- диагональная матрица с элементами e на диагонали и z на остальных позициях.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n => {?}

-- транспонирование матриц

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n => {?}

-- сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m => {?}

-- умножение матриц

-- z ─ нейтральный элемент по сложению.
\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k => {?}

-- 9. Определите факториал через Nat-rec.

\func factorial (n : Nat) : Nat =>
  Nat-rec Nat 1 (\lam n r => suc n * r) n

\func factorialTest : factorial 3 = 6 => idp

-- 10. Докажите ассоциативность сложения для натуральных чисел через Nat-elim.

\func +-assoc (x y z : Nat) : (x + y) + z = x + (y + z) =>
  Nat-elim (\lam z => (x + y) + z = x + (y + z)) idp (\lam n p => pmap suc p) z

-- 11. Определите рекурсор и элиминатор для D.

\data D
  | con1 Nat
  | con2 D D
  | con3 (Nat -> D)

\func D-elim (P : D -> \Type)
             (con1f : \Pi (n : Nat) -> P (con1 n))
             (con2f : \Pi (l r : D) -> P l -> P r -> P (con2 l r))
             (con3f : \Pi (f : Nat -> D) -> (\Pi (n : Nat) -> P (f n)) -> P (con3 f))
             (d : D) : P d
  \elim d
    | con1 n => con1f n
    | con2 d1 d2 => con2f d1 d2 (D-elim P con1f con2f con3f d1) (D-elim P con1f con2f con3f d2)
    | con3 f => con3f f (\lam n => D-elim P con1f con2f con3f $ f n)

\func D-rec (P : \Type)
            (con1f : Nat -> P)
            (con2f : \Pi (l r : D) -> P -> P -> P)
            (con3f : \Pi (f : Nat -> D) -> \Pi (g : Nat -> P) -> P)
            (d : D) : P
  => D-elim (\lam _ => P) con1f con2f con3f d

{- To check that the definition of D-elim and D-rec is correct, you can try to implement foo using D-rec.
\func foo (d : D) : Nat
  | con1 n => n
  | con2 d1 d2 => foo d1 Nat.+ foo d2
  | con3 g => foo (g (foo (g 100)))
-}

-- example of usage
\func foo (d : D) : Nat => D-rec Nat id (\lam  _ _ => +) (\lam _ g => g (g 100)) d

-- 12. Определите рекурсор и элиминатор для List.

\func List-elim {A : \Type}
                (P : List A -> \Type)
                (nf : P nil)
                (cf : \Pi (a : A) -> \Pi (l : List A) -> P l -> P (a :: l))
                (l : List A) : P l
  \elim l
    | nil => nf
    | :: x xs => cf x xs $ List-elim P nf cf xs

\func List-rec {A : \Type}
               (P : \Type)
               (nf : P)
               (cf : \Pi (a : A) -> \Pi (l : List A) -> P -> P)
               (l : List A) : P
  => List-elim (\lam _ => P) nf cf l

-- example of usage
\func sum' (l : List Nat) => List-rec {Nat} Nat 0 (\lam a _ b => a + b) l

\func sum'Test : sum' (1 :: 2 :: 3 :: nil) = 6 => idp